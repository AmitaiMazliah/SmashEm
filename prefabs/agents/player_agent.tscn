[gd_scene load_steps=12 format=3 uid="uid://dd6skvb0tvmwh"]

[ext_resource type="PackedScene" uid="uid://dqsa78xqy80jb" path="res://prefabs/agents/agent.tscn" id="1_8igvm"]
[ext_resource type="Script" path="res://scripts/agents/player_agent.gd" id="2_fx3lm"]
[ext_resource type="Shader" path="res://movement_prediction_line.gdshader" id="3_urv4q"]
[ext_resource type="Texture2D" uid="uid://bw5o7xbm5rwjg" path="res://art/projection-line.png" id="4_iupx7"]
[ext_resource type="Script" path="res://MovementPredictionLine.gd" id="5_af2o0"]
[ext_resource type="Resource" uid="uid://uc34v13np0qq" path="res://resources/items/test.tres" id="6_mmbng"]

[sub_resource type="Shader" id="Shader_om33a"]
code = "shader_type canvas_item;

uniform float level_1 : hint_range(0.0, 1.0) = 0.5; 
uniform float level_1_smoothing : hint_range(0.0, 1.0) = 0.03; // Lengthens the color transition
uniform float level_2 : hint_range(0.0, 1.0) = 0.0;   // If left at 0, only level 1 is used.
uniform float level_2_smoothing : hint_range(0.0, 1.0) = 0.03;
uniform float min_light : hint_range(0.0, 1.0) = 0.0;
uniform float mid_light : hint_range(0.0, 1.0) = 0.0; // If left at 0 it defaults to calculating between min and max.
uniform float max_light : hint_range(0.0, 1.0) = 1.0;

void light() {
	float nl = -dot(normalize(vec3(LIGHT_VEC,-LIGHT_HEIGHT)), NORMAL);
	float diff = max(nl, 0.0)*LIGHT_COLOR.a;
	float mid_range_light = mid_light;
	if (mid_light == 0.0) { mid_range_light = (max_light * 0.66) + (min_light * 0.33); }
	if (level_1 != 0.0 && level_2 == 0.0) {
		diff = smoothstep(level_1, (level_1 + level_1_smoothing), diff) + min_light;
		if (diff == 0.0) { diff = min_light; } else if (diff >= 1.0 || diff > max_light) { diff = max_light; }
	} else if (level_1 != 0.0 && level_2 != 0.0) {
		if (diff <= level_1) { 
			diff = smoothstep((level_1 - level_1_smoothing), level_1, diff) + min_light;
			if (diff == 0.0) { diff = min_light; } 
			if (diff > mid_range_light) { diff = mid_range_light; }
		} else if (diff > level_2) {
			diff = smoothstep(level_2, (level_2 + level_2_smoothing), diff) + (mid_range_light);
			if (diff < mid_range_light) { diff = mid_range_light; }
			if (diff >= 1.0 || diff >= max_light) { diff = max_light; }
		} else {
			diff = mid_range_light;
		} 
	} 
	LIGHT_VEC = -NORMAL.xy*length(LIGHT_VEC); 
	LIGHT_COLOR = diff*LIGHT_COLOR;
	LIGHT = LIGHT;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_baq46"]
shader = SubResource("Shader_om33a")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1efxl"]
shader = ExtResource("3_urv4q")
shader_parameter/scrolling_speed = 2.0

[sub_resource type="CircleShape2D" id="CircleShape2D_gh628"]
radius = 6.50077

[sub_resource type="CircleShape2D" id="CircleShape2D_hdpcg"]

[node name="PlayerAgent" instance=ExtResource("1_8igvm")]
script = ExtResource("2_fx3lm")
distance_from_touch_location_to_count_play = 60.0

[node name="Sprite2D" parent="Visuals" index="0"]
material = SubResource("ShaderMaterial_baq46")

[node name="MovementPredictionLine" type="Line2D" parent="Visuals" index="2"]
material = SubResource("ShaderMaterial_1efxl")
texture = ExtResource("4_iupx7")
texture_mode = 1
script = ExtResource("5_af2o0")
max_points_to_predict = 30000
precision = 50

[node name="CollisionCheck" type="CharacterBody2D" parent="Visuals/MovementPredictionLine" index="0"]
collision_layer = 4
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="Visuals/MovementPredictionLine/CollisionCheck" index="0"]
shape = SubResource("CircleShape2D_gh628")

[node name="CollisionShape2D" parent="." index="1"]
highlight_color = Color(0, 0, 1, 1)

[node name="TouchScreenButton" type="TouchScreenButton" parent="." index="2"]
scale = Vector2(6, 6)
shape = SubResource("CircleShape2D_hdpcg")
shape_visible = false

[node name="AgentEquipment" parent="." index="3"]
current_equipment = {
"Head": ExtResource("6_mmbng")
}

[connection signal="pressed" from="TouchScreenButton" to="." method="_on_touch_screen_button_pressed"]
[connection signal="released" from="TouchScreenButton" to="." method="_on_touch_screen_button_released"]
